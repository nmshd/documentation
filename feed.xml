<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-04T17:31:43+02:00</updated><id>/feed.xml</id><title type="html">enmeshed</title><subtitle>enmeshed is a home of various open source components, making the digital life of users and organizations easier.</subtitle><author><name>enmeshed Team</name></author><entry><title type="html">FerretDB compatibility for the enmeshed Connector</title><link href="/blog/announcing-ferretdb-compatibility" rel="alternate" type="text/html" title="FerretDB compatibility for the enmeshed Connector" /><published>2023-04-06T00:00:00+02:00</published><updated>2023-04-06T00:00:00+02:00</updated><id>/blog/announcing-ferretdb-compatibility</id><content type="html" xml:base="/blog/announcing-ferretdb-compatibility"><![CDATA[<p>At enmeshed, we believe in the importance of open-source software and the freedom it gives developers.</p>

<p>MongoDB is licensed under the Server Side Public License (SSPL) and from the start of our project we knew that we needed to find an alternative database solution for the enmeshed Connector. After researching and testing several options, we found <a href="https://www.ferretdb.io/">FerretDB</a> to be a suitable truly open source replacement for MongoDB.</p>

<h2 id="what-is-ferretdb">What is FerretDB?</h2>

<p><a href="https://www.ferretdb.io/">FerretDB</a> acts as a drop-in replacement for MongoDB. It does this by proxying the MongoDB wire protocol and translating it to SQL, using PostgreSQL as the database engine.</p>

<p>More information about FerretDBs architecture can be found <a href="https://docs.ferretdb.io/understanding-ferretdb/">in their docs</a>.</p>

<p>This means that the enmeshed Connector can now also be used with the PostgreSQL database, <a href="https://github.com/nmshd/feedback/issues/13">as requested some time ago</a>.</p>

<h2 id="how-did-we-make-sure-that-ferretdb-is-compatible-with-the-enmeshed-connector">How did we make sure that FerretDB is compatible with the enmeshed Connector?</h2>

<p>Our team has worked hard to integrate FerretDB into our product. We tested extensively, made the necessary adjustments and provided feedback to the FerretDB team to ensure compatibility. As a result all libraries that were previously tested against MongoDB are now also tested against FerretDB during development and for each release in our CI/CD pipeline.</p>

<h2 id="how-to-use-ferretdb-with-the-enmeshed-connector">How to use FerretDB with the enmeshed Connector?</h2>

<p>The simplest way to deploy the Connector with a FerretDB instance is the <a href="/operate/setup-with-helm-charts">Connector Helm Chart</a>. We updated the Chart to include FerretDB as an optional sidecar container, which can be enabled by setting <code class="language-plaintext highlighter-rouge">pod.ferretdb.enabled</code> to <code class="language-plaintext highlighter-rouge">true</code>.</p>

<p>We also updated the <a href="/operate/setup-with-docker-compose">Connector Installation Guide</a> with an option to deploy the Connector and FerretDB using Docker Compose.</p>

<h2 id="conclusion">Conclusion</h2>

<p>At enmeshed, we are proud to have found a suitable open-source replacement for MongoDB and we are confident that it will meet our needs and provide a reliable solution for our users.</p>

<p>Thanks to FerretDB we are now able to offer the enmeshed Connector with PostgreSQL, so developers can continue to use open-source software and enjoy the freedom it gives.</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="announcement" /><category term="connector" /><summary type="html"><![CDATA[At enmeshed, we believe in the importance of open-source software and the freedom it gives developers.]]></summary></entry><entry><title type="html">The (bumpy) road to enmeshed V2</title><link href="/blog/road-to-enmeshed-v2" rel="alternate" type="text/html" title="The (bumpy) road to enmeshed V2" /><published>2022-10-06T00:00:00+02:00</published><updated>2022-10-06T00:00:00+02:00</updated><id>/blog/road-to-enmeshed-v2</id><content type="html" xml:base="/blog/road-to-enmeshed-v2"><![CDATA[<p>Hey there,</p>

<p>as we’ve already communicated in the previous blogs, we would like to release enmeshed version 2 soon. As it is incompatible with version 1, the switch to version 2 is unfortunately not as straightforward as we’d hoped.</p>

<p>We’ve had many discussions about the pros and cons of different cut-over approaches and in the end decided to go with a very radical one: In short, the enmeshed App, Backbone and Connector (V1) will be updated to V2 and therefore be incompatible with old data.</p>

<p>The users and organizations we know of so far had no objections against this approach, and thus we keep the cut-over as easy as possible. We apologize for any inconveniences this might cause.</p>

<h3 id="so-how-can-you-get-up-to-speed-with-version2">So how can you get up to speed with Version2?</h3>

<ul>
  <li>Have a look at the updated <a href="/integrate/integration-example">Connector Tutorial</a>.</li>
  <li>There will be a public beta of the enmeshed App (V2) in the Apple and Google App stores soon. Be aware that the public beta will not support existing V1 profiles and thus the enmeshed App’s data should be wiped when using V2.</li>
  <li>There is a beta tag of the enmeshed Connector Docker image which you can set up by yourself.</li>
</ul>

<p>Your enmeshed Team</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="announcement" /><category term="v2" /><summary type="html"><![CDATA[Hey there,]]></summary></entry><entry><title type="html">Announcing enmeshed v2 Requests</title><link href="/blog/announcing-enmeshed-v2-requests" rel="alternate" type="text/html" title="Announcing enmeshed v2 Requests" /><published>2022-07-13T00:00:00+02:00</published><updated>2022-07-13T00:00:00+02:00</updated><id>/blog/announcing-enmeshed-v2-requests</id><content type="html" xml:base="/blog/announcing-enmeshed-v2-requests"><![CDATA[<p>This is one of the blog posts regarding enmeshed v2. For an overview of all enmeshed v2 blog posts, please refer to the <a href="/blog/announcing-enmeshed-v2">enmeshed v2 announcement blog post</a>.</p>

<p>This blog post requires a superficial understanding of the new Attribute handling. Please refer to the <a href="/blog/announcing-enmeshed-v2-attributes">corresponding blog post</a> to learn more about it if you are not yet familiar with it.</p>

<p>This blog post describes what Requests are in the enmeshed universe and how they are used to exchange Attributes and establish Relationships.</p>

<p>When we mention “the App” or “the Connector” in this blog post, we mean the official <a href="/explore/app">enmeshed App</a> and <a href="/explore/connector">enmeshed Connector</a>.</p>

<p>Keep in mind that we cannot describe all details in this blog post. Refer to the V2 documentation for further information about how Requests are working “under the hood”.</p>

<h2 id="requests">Requests</h2>

<p>Requests in enmeshed always defined a way to exchange structured data. In enmeshed V1 this was exclusively about exchanging structured Attributes with its AttributesChangeRequest and AttributesShareRequest. In V1 there also was no defined response structure, as well as no track record of Requests and their status. Thus, V1 Requests were quite limited.</p>

<p>Requests in V2 extend the Request featureset by providing more structured Requests, as well as Requests for unstructured data. Additionally, they are not fixed to the Identitity’s Attributes. One example is a form you can send to a User, which contains some questions in natural language, which does not affect the Attributes. Another example is a Multi-Factor-Authentication Request which might be available in the future.</p>

<p>In enmeshed V1 <code class="language-plaintext highlighter-rouge">RelationshipTemplates</code> and <code class="language-plaintext highlighter-rouge">RequestMails</code> each defined their own way for exchanging Attributes. Further only the App could process them. When integrating via the Connector you had to manually process all Requests. For V2 we pulled the Request handling <a href="/explore/how_does_enmeshed_work#layers">from the User-Experience Layer to the Consumption layer</a>. This enabled us to provide you with an API in the Connector to work with Requests. It also helped us making Request handling more flexible and easier to use.</p>

<h2 id="exchanging-requests">Exchanging Requests</h2>

<p>The simplest way to exchange Requests is using Messages. But for sending Messages a Relationship is required. To create a Relationship we also wanted the possiblity to exchange Requests with the same structure.</p>

<h3 id="relationships-and-relationshiptemplates">Relationships and RelationshipTemplates</h3>

<p>The flow for establishing a Relationship between the App and another App or Connector has changed significantly. The body of the RelationshipTemplate is now a strict type that can be processed by the App and the Connector. It looks as follows:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">RelationshipTemplateContent</span> <span class="p">{</span>
  <span class="dl">"</span><span class="s2">@type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">RelationshipTemplateContent</span><span class="dl">"</span><span class="p">;</span>
  <span class="nl">title</span><span class="p">?:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">metadata</span><span class="p">?:</span> <span class="nx">object</span><span class="p">;</span>
  <span class="nl">onNewRelationship</span><span class="p">:</span> <span class="nx">Request</span><span class="p">;</span>
  <span class="nl">onExistingRelationship</span><span class="p">?:</span> <span class="nx">Request</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>More about the structure of a Request will follow in the V2 documentation.</p>

<p>When the RelationshipTemplate is scanned by the App, the Request (defined by the creator of the RelationshipTemplate) is rendered for the User. This is similar to the flow in V1. The App will then automatically create the Relationship when the User accepts the Request.</p>

<h3 id="messages">Messages</h3>

<p>Messages can now be used to exchange the same Requests that are used to enter a Relationship. A Message can now simply contain the content <code class="language-plaintext highlighter-rouge">{ "@type": "Request", ... }</code> or <code class="language-plaintext highlighter-rouge">{ "@type": "Response", ... }</code>. The <code class="language-plaintext highlighter-rouge">RequestMail</code>, <code class="language-plaintext highlighter-rouge">AttributesChangeRequest</code> and <code class="language-plaintext highlighter-rouge">AttributesShareRequest</code> types are now deprecated and will be removed in the future. Because the enmeshed V2 App will stop processing these types we strictly advise against further using them.</p>

<p>So far, only one Request can be sent with one Message. This is intentional, as with RequestItemGroups and RequestItems, various data or actions can be requested. If there is the need to submit multiple Requests, send multiple Messages.</p>

<h2 id="modules-managing-requests">Modules managing Requests</h2>

<p>The main component powering the enmeshed App and the enmeshed Connector is the Runtime. The Runtime is modular and we decided to use this to provide two Modules for managing Requests: the <a href="/explore/runtime#request-module">Request Module</a> and the <a href="/explore/runtime#decider-module">Decider Module</a>.</p>

<p>The Decider Module is in its early stages and we will inform you about it in the future.</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="announcement" /><category term="v2" /><category term="requests" /><summary type="html"><![CDATA[This is one of the blog posts regarding enmeshed v2. For an overview of all enmeshed v2 blog posts, please refer to the enmeshed v2 announcement blog post.]]></summary></entry><entry><title type="html">Announcing enmeshed V2 Attributes</title><link href="/blog/announcing-enmeshed-v2-attributes" rel="alternate" type="text/html" title="Announcing enmeshed V2 Attributes" /><published>2022-06-30T00:00:00+02:00</published><updated>2022-06-30T00:00:00+02:00</updated><id>/blog/announcing-enmeshed-v2-attributes</id><content type="html" xml:base="/blog/announcing-enmeshed-v2-attributes"><![CDATA[<p>This is one of the blog posts regarding enmeshed V2. For an overview of all V2 blog posts, please refer to the <a href="/blog/announcing-enmeshed-v2">V2 announcement blog post</a>.</p>

<p>In this blog post we want to talk about pain points of the V1 Attributes and how we reworked the Attributes to tackle them.</p>

<h2 id="v1-attributes">V1 Attributes</h2>

<p>So far, Attributes in enmeshed have only been name/value pairs for Identities, e.g.:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"@type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Attribute"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Person.givenName"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Max"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Attributes are uniquely identified by name for each Identity. There are considerable implications by this approach which have been voiced by the community so far. The major pain points with the current approach are:</p>

<ul>
  <li>Only string values are supported</li>
  <li>Having multiple Attributes of the same name (e.g. <code class="language-plaintext highlighter-rouge">Comm.email</code>) is not really possible</li>
  <li>There is no clear definition and normalization of Attribute names and values</li>
  <li>Documentation of names, possible values and the whole concept behind is too sparse</li>
  <li>Complex Attributes (like an address) are not possible out of the box</li>
  <li>There is no semantic validation of Attribute values</li>
  <li>No binary content is possible as an Attribute value and thus binary content (like files) could not be stored or shared as Attributes</li>
  <li>There is no inheritance of Attributes. An Attribute can only be queried by a name with an exact match by a string comparison. Different addresses, e.g. a street address or a post office box cannot be queried with a single query</li>
  <li>Attributes can only be stored for Identities and not for Relationships</li>
  <li>A manual User decision is always required to change Attributes, even if the User has no say in the Attributes at all (e.g. a company moves its headquarters and would like to update the primary address)</li>
  <li>Querying Attributes of a User by only supplying a name is too broad and error prone</li>
</ul>

<h2 id="v2-attributes">V2 Attributes</h2>

<p>We therefore decided to completely revamp the Attribute handling to a new version, which unfortunately will be backward-incompatible to the old Attribute handling. Otherwise, we would have to live with too many constraints.</p>

<p>To get started with the V2 Attributes here you can see the same Attribute as shown above in the V1 Attributes section transferred to a V2 Attribute:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"@type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IdentityAttribute"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"owner"</span><span class="p">:</span><span class="w"> </span><span class="s2">"&lt;an-address&gt;"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"GivenName"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"value"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Max"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Below you can find the major changes of the new Attribute handling:</p>

<ul>
  <li>Attributes no longer have a string value but a flexible type as a value, which could be extended, meaning:
    <ul>
      <li>No longer only string value support</li>
      <li>Attribute values can be documented much easier</li>
      <li>Complex Attributes now work out of the box, like <code class="language-plaintext highlighter-rouge">Person</code> or <code class="language-plaintext highlighter-rouge">Address</code></li>
      <li>Semantic validation of Attribute values is now possible (e.g. phone numbers, email addresses or tax ids)</li>
      <li>Binary content is now possible, i.e. storing and querying Files as Attributes of Identities</li>
    </ul>
  </li>
  <li>The Attribute value type is replacing the Attribute name most of the time
    <ul>
      <li>With typed Attribute values introduced above, we no longer require a specific Attribute name to be set. The normalized type <code class="language-plaintext highlighter-rouge">GivenName</code> replaces the old Attribute name <code class="language-plaintext highlighter-rouge">Person.givenName</code> and so on.</li>
      <li>Due to inheritance of Attribute values, querying a super type <code class="language-plaintext highlighter-rouge">Address</code> would imply, that the User could select between a stored <code class="language-plaintext highlighter-rouge">StreetAddress</code> and a stored <code class="language-plaintext highlighter-rouge">PostalBoxAddress</code>. On the other hand, querying a <code class="language-plaintext highlighter-rouge">StreetAddress</code> automatically implies, that only the stored <code class="language-plaintext highlighter-rouge">StreetAddress</code> can be selected.</li>
    </ul>
  </li>
  <li>Multiple Attribute values of the same type are supported
    <ul>
      <li>Thus, multiple addresses or communication properties are supported inherently</li>
      <li>The User can decide between possible Attribute values if multiple values do fit to the query</li>
    </ul>
  </li>
  <li>Further semantics of an Attribute can be set by tagging an Attribute according to predefined or custom Attribute tags. Whereas an Attribute’s type defines its structure (e.g. <code class="language-plaintext highlighter-rouge">Address</code>) the Attribute’s tags might define that it is a work or a private address.
    <ul>
      <li>Tags introduce a new semantic metadata set to an Attribute, allowing to specify its predominant use.</li>
      <li>With tags it is possible to differentiate Attributes with the same type:
        <ul>
          <li>An Attribute <code class="language-plaintext highlighter-rouge">StreetAddress</code> with value X is stored with tags <code class="language-plaintext highlighter-rouge">personal</code> and <code class="language-plaintext highlighter-rouge">official</code>.</li>
          <li>A second Attribute <code class="language-plaintext highlighter-rouge">StreetAddress</code> with value Y is stored with tag <code class="language-plaintext highlighter-rouge">work</code>.</li>
          <li>Value Y will be proposed to the User if a <code class="language-plaintext highlighter-rouge">StreetAddress</code> with tag <code class="language-plaintext highlighter-rouge">work</code> is queried.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>In addition to the tags, we would like to introduce a Relationship store concept, with which Attributes can be stored between Identities on a per-Relationship base. This comes in handy for use cases with Relationship-specific or contract-specific Attributes:
    <ul>
      <li>Think about a customer number which needs to be stored between a User and a webshop somehow. It doesn’t belong to the User but it also does not belong to the webshop.</li>
      <li>Additionally, this concept can be used for submitting Relationship metadata like company brand/theme information, possible actions a User could trigger for the Relationship or other cool stuff.</li>
      <li>A restriction of who can change the Relationship Attribute can block Users messing around with their <code class="language-plaintext highlighter-rouge">customerId</code>.</li>
    </ul>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>All in all, many changes which will make the Attribute management of and between Identities much more mature. Together with a <a href="/blog/announcing-enmeshed-v2-requests">new way of handling Requests (and Responses)</a>, we think enmeshed has a much more holistic feature set.</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="announcement" /><category term="v2" /><category term="attributes" /><summary type="html"><![CDATA[This is one of the blog posts regarding enmeshed V2. For an overview of all V2 blog posts, please refer to the V2 announcement blog post.]]></summary></entry><entry><title type="html">Announcing enmeshed V2</title><link href="/blog/announcing-enmeshed-v2" rel="alternate" type="text/html" title="Announcing enmeshed V2" /><published>2022-06-27T00:00:00+02:00</published><updated>2022-06-27T00:00:00+02:00</updated><id>/blog/announcing-enmeshed-v2</id><content type="html" xml:base="/blog/announcing-enmeshed-v2"><![CDATA[<p>We are currently working on enmeshed version 2. We got a lot of feedback from the community and so we are improving enmeshed in different areas to tackle it.</p>

<h2 id="attributes">Attributes</h2>

<p>Attributes in enmeshed have been a huge pain point during the integration using the enmeshed Connector but also while using the enmeshed App as an end User. For enmeshed V2 we are working on a new way to handle, store and transfer Attributes.</p>

<p>For an overview of the changes regarding Attributes, please refer to the <a href="/blog/announcing-enmeshed-v2-attributes">corresponding blog post</a>.</p>

<h2 id="requests">Requests</h2>

<p>Requests in enmeshed always defined a way to exchange structured data. In enmeshed V1 this was exclusively about Attributes. Requests in V2 will also be able to exchange data without persisting them to the User’s Attributes, e.g. using a form.</p>

<p>In enmeshed V1 <code class="language-plaintext highlighter-rouge">RelationshipTemplates</code> and <code class="language-plaintext highlighter-rouge">RequestMails</code> each defined their own way for exchanging Attributes. Further only the App could process them. When integrating via the Connector you had to manually process all Requests. For V2 we pulled the Request handling <a href="/explore/how_does_enmeshed_work#layers">from the User-Experience Layer to the Consumption layer</a>. This enabled us to provide you with an API in the Connector to work with Requests. It also helped us making Request handling more flexible and easier to use.</p>

<p>For an overview of Requests, please refer to the <a href="/blog/announcing-enmeshed-v2-requests">corresponding blog post</a>.</p>

<h2 id="backwards-compatibility">Backwards compatibility</h2>

<p>All these new features required a huge amount of changes behind the scenes. If we wanted to be backwards compatible, we would have had to spend a lot of extra work, which would have delayed the release by several weeks. Therefore we decided to pay the price that comes with this backwards incompatibility in favor of the earlier release date.</p>

<p>Backwards incompatiblity in this case means that all the data stored by the App and Connector V1 will be invalid and cannot be used anymore.</p>

<p>If you need a compatibility of V1 and V2, please contact us <a href="https://www.js-soft.com/enmeshed/">here</a> and we will try to sort out a solution.</p>

<h2 id="getting-prereleases">Getting Prereleases</h2>

<p>During the development of enmeshed V2 we will continue to publish new versions of the Connector and the app.</p>

<p>If you are curious you can already check out one of the early <a href="https://github.com/nmshd/cns-connector/pkgs/container/connector/versions">Connector versions</a> tagged as <code class="language-plaintext highlighter-rouge">alpha</code>. Keep in mind that these are highly experimental and shouldn’t be used in production scenarios, because there can be API changes at any time.</p>

<h2 id="feedback">Feedback</h2>

<p>As always we are happy to hear from you through the usual channels! Feel free to share your thoughts and feedback and discuss the changes in the <a href="https://github.com/nmshd/feedback/discussions/17">V2 GitHub Discussion</a>.</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="announcement" /><category term="v2" /><summary type="html"><![CDATA[We are currently working on enmeshed version 2. We got a lot of feedback from the community and so we are improving enmeshed in different areas to tackle it.]]></summary></entry><entry><title type="html">The new webhooks Connector Module</title><link href="/blog/webhooks-v2-connector-module" rel="alternate" type="text/html" title="The new webhooks Connector Module" /><published>2022-03-02T00:00:00+01:00</published><updated>2022-03-02T00:00:00+01:00</updated><id>/blog/webhooks-v2-connector-module</id><content type="html" xml:base="/blog/webhooks-v2-connector-module"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Hello everyone!</p>

<p>Today we want to announce a new version of the webhooks Connector Module.</p>

<p>The old version of the Module had many limitations that we could only address with a complete rewrite. To be backwards compatible the old version of the Module is still available under the name <code class="language-plaintext highlighter-rouge">webhooks</code>.
The new Module can be configured under the name <code class="language-plaintext highlighter-rouge">webhooksV2</code>.
If you don’t want to use the new Module it doesn’t require further actions.</p>

<p>We still recommend to switch to the new Module as soon as possible as the old Module is now deprecated and will not be maintained anymore.</p>

<h2 id="the-new-module">The new Module</h2>

<p>The new Module gives you the possibility to define so called <code class="language-plaintext highlighter-rouge">triggers</code>, which represent the names of the events we already send Connector-internally (e.g. <code class="language-plaintext highlighter-rouge">transport.messageReceived</code>). The Module then listens to the configured events and simply sends the event data to the configured URL. For a detailed documentation of how to configure the new webhooks Module, see <a href="/operate/configuration#webhooks">the Connector configuration docs</a>.</p>

<p>While in the old Module you could configure an interval in which the new information is published, the new Module calls the webhook immediately after the configured event was triggered.
<em>Do you miss the possibility to configure a publish interval? Raise a feature request in our <a href="https://github.com/nmshd/feedback/issues/new/choose">feedback repository</a>, and we will see what we can do about it.</em></p>

<p>Since you can use arbitrary events as triggers now, the new Module gives you much more points at which you can integrate. We provide a <a href="/integrate/connector-events">list of these events</a>. Note that the list will grow in the next weeks, so check the docs from time to time. If you wish for a specific event, you can also <a href="https://github.com/nmshd/feedback/issues/new/choose">raise a feature request</a>.</p>

<h2 id="migration">Migration</h2>

<p>In order to be notified about the same stuff as with the old Module, you should configure the new Module in the following way:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"webhooksV2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"targets"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"target1"</span><span class="p">:</span><span class="w">  </span><span class="p">{</span><span class="w">
                </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://example.com/webhook"</span><span class="p">,</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
        </span><span class="nl">"webhooks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"triggers"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"transport.messageReceived"</span><span class="p">,</span><span class="w"> </span><span class="s2">"transport.relationshipChanged"</span><span class="p">],</span><span class="w">
                </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"target1"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The data sent to the given URL has changed though:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">trigger</span><span class="dl">"</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">data</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1">// properties depend on the event</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the POST body you will receive the <code class="language-plaintext highlighter-rouge">trigger</code> of the webhook (which is the name of the event), as well as the <code class="language-plaintext highlighter-rouge">data</code> of the event. Both are documented in the <a href="/integrate/connector-events">Connector Events</a> section.</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="connector" /><category term="update" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Introducing enmeshed</title><link href="/blog/introducing-enmeshed" rel="alternate" type="text/html" title="Introducing enmeshed" /><published>2021-11-01T00:00:00+01:00</published><updated>2021-11-01T00:00:00+01:00</updated><id>/blog/introducing-enmeshed</id><content type="html" xml:base="/blog/introducing-enmeshed"><![CDATA[<p>Hello everyone!</p>

<p>We are delighted to introduce a new open source project named enmeshed. It is the home of software libraries, components, ideas, discussions, and many more in the area of digitalization.</p>

<p>We think the world is ready for a whole new adventure of digital communication, easy and secure data sharing, and empowering the user - while using state-of-the-art technologies and proven architectures without forgetting the user experience, integration, processes, security or privacy.</p>

<p>This site is still under construction and as such, we will update it regularly in the coming weeks.</p>

<p>Your enmeshed Team</p>]]></content><author><name>enmeshed Team</name></author><category term="blog" /><category term="page" /><category term="update" /><summary type="html"><![CDATA[Hello everyone!]]></summary></entry></feed>