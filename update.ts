import * as fs from "fs";
import path from "path";
const Excel = require("exceljs");
const filePath = path.normalize(__dirname + "/UseCases.xlsx");
const scenariosWorksheetName = "Scenarios";
const useCasesWorksheetName = "UseCases";

// Define the interface dynamically based on the headers
interface DynamicUseCase {
    [key: string]: any;
}
function writeTextToFile(object: DynamicUseCase, text: string): void {
    fs.readFile("_docs_" + object.Link + ".md", "utf8", (missingFile, data) => {
        const regex = /---[\s\S]*?---/g; // Regular expression to match text between "---" across multiple lines
        var newText = "";
        if (missingFile) {
            console.info("\x1b[32m%s\x1b[0m", "Create: " + object.ID + " - ", object.Link);
            newText = text;
        } else {
            console.info("\x1b[93m%s\x1b[0m", "Update: " + object.ID + " - ", object.Link);
            newText = data.replace(regex, text);
        }
        fs.promises.writeFile("_docs_" + object.Link + ".md", newText, "utf-8");
    });
}

function createScenarioText(scenarioObject: DynamicUseCase): string {
    var text = "---\n";
    text += "# !!! Warning: Do not edit this file; any changes must be replicated in Excel !!!\n";
    text += "permalink: " + scenarioObject.Link + "\n";
    if ((scenarioObject["Documentation Status"] == "DONE" || scenarioObject["Documentation Status"] == "OLD") && scenarioObject.redirect_from !== null) {
        text += "redirect_from:\n";
        for (const link of scenarioObject.redirect_from.split(" ")) {
            text += `  - ${link}\n`;
        }
    }
    if (scenarioObject["Documentation Status"] == "DONE" || scenarioObject["Documentation Status"] == "OLD") {
        text += "published: true\n";
    } else {
        text += "published: false\n";
    }
    text += 'title: "' + replaceEach(scenarioObject.Title, ["<", "", ">", "", ":", "", "’", "'"]) + '"\n';
    text += "type: scenario\n";
    text += "toc: true\n";
    text += "properties:\n";

    for (const key in scenarioObject) {
        if (
            key != "Product" &&
            key != "Role" &&
            key != "Title" &&
            key != "User Story" &&
            key != "New Component" &&
            key != "Require" &&
            key != "NBP_Scenario" &&
            key != "Link to Jira" &&
            key != "redirect_from"
        )
            if (Object.prototype.hasOwnProperty.call(scenarioObject, key)) {
                const value = scenarioObject[key];
                // for formulas use the value
                if (value == null) {
                    text += "  - " + `${key.toLowerCase()}:\n`;
                } else {
                    text += "  - " + `${key.toLowerCase()}: ${value}\n`;
                }
            }
    }

    text += "require:\n";
    text += "required_by:\n";
    text += "---";
    return text;
}

function createUseCaseText(useCaseObject: DynamicUseCase): string {
    var text = "---\n";
    text += "# !!! Warning: Do not edit this file; any changes must be replicated in Excel !!!\n";
    text += "permalink: " + useCaseObject.Link + "\n";
    if ((useCaseObject["Documentation Status"] == "DONE" || useCaseObject["Documentation Status"] == "OLD") && useCaseObject.redirect_from !== null) {
        text += "redirect_from:\n";
        for (const link of useCaseObject.redirect_from.split(" ")) {
            text += `  - ${link}\n`;
        }
    }
    if (useCaseObject["Documentation Status"] == "DONE" || useCaseObject["Documentation Status"] == "OLD") {
        text += "published: true\n";
    } else {
        text += "published: false\n";
    }
    text += 'title: "' + replaceEach(useCaseObject.Title, ["<", "", ">", "", ":", "", "’", "'"]) + '"\n';
    text += "type: scenario\n";
    text += "toc: true\n";
    text += "properties:\n";

    for (const key in useCaseObject) {
        if (key != "Title" && key != "Require" && key != "redirect_from")
            if (Object.prototype.hasOwnProperty.call(useCaseObject, key)) {
                const value = useCaseObject[key];
                // for formulas use the value
                if (value == null) {
                    text += "  - " + `${key.toLowerCase()}:\n`;
                } else {
                    text += "  - " + `${key.toLowerCase()}: ${value}\n`;
                }
            }
    }

    text += "require:\n";
    text += "required_by:\n";
    text += "---";
    return text;
}

async function readExcelFile(filePath: string, worksheetName: string): Promise<DynamicUseCase[]> {
    var workbook = new Excel.Workbook();
    try {
        await workbook.xlsx.readFile(filePath);

        var worksheet = workbook.getWorksheet(worksheetName);

        // Check if the worksheet exists
        if (!worksheet) {
            const worksheetNames = workbook.worksheets.map((worksheet: { name: any }) => worksheet.name);
            throw new Error("Worksheet '" + worksheetName + "' not found. Possible entries are: " + worksheetNames);
        }

        // Get the headers from the first row of the Excel file
        const headers: string[] = [];
        worksheet.getRow(1).eachCell({ includeEmpty: false }, (cell: { value: string }) => {
            headers.push(cell.value as string);
        });
        var dynamicUseCases: DynamicUseCase[] = [];

        // Iterate over each row (skipping the first row as it contains headers)
        for (let rowNumber = 2; rowNumber <= worksheet.rowCount; rowNumber++) {
            const currentRow = worksheet.getRow(rowNumber);

            // Create a DynamicUseCase object for the current row
            const dynamicUseCase: DynamicUseCase = {};
            headers.forEach((header, index) => {
                // if the result is a formula, only the result is used
                if (typeof currentRow.getCell(index + 1).value === "object" && currentRow.getCell(index + 1).value !== null) {
                    dynamicUseCase[header] = currentRow.getCell(index + 1).value.result;
                } else {
                    dynamicUseCase[header] = currentRow.getCell(index + 1).value;
                }
            });
            // Add the DynamicUseCase object to the array
            dynamicUseCases.push(dynamicUseCase);
        }

        // Now 'dynamicUseCases' is an array containing objects for each row in the Excel table

        return dynamicUseCases;
    } catch (error: any) {
        // This block will catch any errors thrown in the try block or by the Promise
        console.error("Async operation failed:", error.message);
        // Propagate the error or handle it as needed
        throw error;
    }
}

function replaceEach(str: string, replacements: string[]): string {
    let result = str;
    for (let i = 0; i < replacements.length; i += 2) {
        result = result.replace(new RegExp(replacements[i], "g"), replacements[i + 1]);
    }
    return result;
}
async function main() {
    try {
        const scenariosObject = await readExcelFile(filePath, scenariosWorksheetName);
        if (scenariosObject && scenariosObject.length > 0) {
            scenariosObject.forEach((scenarioObject) => {
                if (scenarioObject.ID != null) {
                    var scenarioText = createScenarioText(scenarioObject);
                    writeTextToFile(scenarioObject, scenarioText);
                }
            });
        } else {
            console.log("The array is empty or undefined.");
        }
    } catch (error) {
        console.error("Error updating Scenarios:", error);
    }
    try {
        const useCasesObject = await readExcelFile(filePath, useCasesWorksheetName);
        if (useCasesObject && useCasesObject.length > 0) {
            useCasesObject.forEach((useCaseObject) => {
                if (useCaseObject.ID != null) {
                    var useCaseText = createUseCaseText(useCaseObject);
                    console.log(useCaseText);
                    // writeTextToFile(useCaseObject, useCaseText);
                }
            });
        } else {
            console.log("The array is empty or undefined.");
        }
    } catch (error) {
        console.error("Error updating UseCases:", error);
    }
}

main();
